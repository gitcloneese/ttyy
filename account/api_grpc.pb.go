// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: account/api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Account_AccountRoleList_FullMethodName   = "/account.Account/AccountRoleList"
	Account_UserDisable_FullMethodName       = "/account.Account/UserDisable"
	Account_LockAccount_FullMethodName       = "/account.Account/LockAccount"
	Account_LockList_FullMethodName          = "/account.Account/LockList"
	Account_KickPlayer_FullMethodName        = "/account.Account/KickPlayer"
	Account_GetPlayerInfo_FullMethodName     = "/account.Account/GetPlayerInfo"
	Account_GetPlayerHeroInfo_FullMethodName = "/account.Account/GetPlayerHeroInfo"
)

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	AccountRoleList(ctx context.Context, in *AccountRoleListReq, opts ...grpc.CallOption) (*AccountRoleListRsp, error)
	UserDisable(ctx context.Context, in *UserDisableReq, opts ...grpc.CallOption) (*UserDisableRsp, error)
	// 封号
	LockAccount(ctx context.Context, in *LockAccountReq, opts ...grpc.CallOption) (*LockAccountRsp, error)
	// 封号记录
	LockList(ctx context.Context, in *LockListReq, opts ...grpc.CallOption) (*LockListRsp, error)
	// 踢玩家下线
	KickPlayer(ctx context.Context, in *KickPlayerReq, opts ...grpc.CallOption) (*KickPlayerRsp, error)
	// 获取玩家详情
	GetPlayerInfo(ctx context.Context, in *GetPlayerInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoRsp, error)
	// 获取玩家仙人信息
	GetPlayerHeroInfo(ctx context.Context, in *GetPlayerHeroInfoReq, opts ...grpc.CallOption) (*GetPlayerHeroInfoRsp, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) AccountRoleList(ctx context.Context, in *AccountRoleListReq, opts ...grpc.CallOption) (*AccountRoleListRsp, error) {
	out := new(AccountRoleListRsp)
	err := c.cc.Invoke(ctx, Account_AccountRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UserDisable(ctx context.Context, in *UserDisableReq, opts ...grpc.CallOption) (*UserDisableRsp, error) {
	out := new(UserDisableRsp)
	err := c.cc.Invoke(ctx, Account_UserDisable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) LockAccount(ctx context.Context, in *LockAccountReq, opts ...grpc.CallOption) (*LockAccountRsp, error) {
	out := new(LockAccountRsp)
	err := c.cc.Invoke(ctx, Account_LockAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) LockList(ctx context.Context, in *LockListReq, opts ...grpc.CallOption) (*LockListRsp, error) {
	out := new(LockListRsp)
	err := c.cc.Invoke(ctx, Account_LockList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) KickPlayer(ctx context.Context, in *KickPlayerReq, opts ...grpc.CallOption) (*KickPlayerRsp, error) {
	out := new(KickPlayerRsp)
	err := c.cc.Invoke(ctx, Account_KickPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetPlayerInfo(ctx context.Context, in *GetPlayerInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoRsp, error) {
	out := new(GetPlayerInfoRsp)
	err := c.cc.Invoke(ctx, Account_GetPlayerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetPlayerHeroInfo(ctx context.Context, in *GetPlayerHeroInfoReq, opts ...grpc.CallOption) (*GetPlayerHeroInfoRsp, error) {
	out := new(GetPlayerHeroInfoRsp)
	err := c.cc.Invoke(ctx, Account_GetPlayerHeroInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
type AccountServer interface {
	AccountRoleList(context.Context, *AccountRoleListReq) (*AccountRoleListRsp, error)
	UserDisable(context.Context, *UserDisableReq) (*UserDisableRsp, error)
	// 封号
	LockAccount(context.Context, *LockAccountReq) (*LockAccountRsp, error)
	// 封号记录
	LockList(context.Context, *LockListReq) (*LockListRsp, error)
	// 踢玩家下线
	KickPlayer(context.Context, *KickPlayerReq) (*KickPlayerRsp, error)
	// 获取玩家详情
	GetPlayerInfo(context.Context, *GetPlayerInfoReq) (*GetPlayerInfoRsp, error)
	// 获取玩家仙人信息
	GetPlayerHeroInfo(context.Context, *GetPlayerHeroInfoReq) (*GetPlayerHeroInfoRsp, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) AccountRoleList(context.Context, *AccountRoleListReq) (*AccountRoleListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRoleList not implemented")
}
func (UnimplementedAccountServer) UserDisable(context.Context, *UserDisableReq) (*UserDisableRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDisable not implemented")
}
func (UnimplementedAccountServer) LockAccount(context.Context, *LockAccountReq) (*LockAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAccount not implemented")
}
func (UnimplementedAccountServer) LockList(context.Context, *LockListReq) (*LockListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockList not implemented")
}
func (UnimplementedAccountServer) KickPlayer(context.Context, *KickPlayerReq) (*KickPlayerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickPlayer not implemented")
}
func (UnimplementedAccountServer) GetPlayerInfo(context.Context, *GetPlayerInfoReq) (*GetPlayerInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerInfo not implemented")
}
func (UnimplementedAccountServer) GetPlayerHeroInfo(context.Context, *GetPlayerHeroInfoReq) (*GetPlayerHeroInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerHeroInfo not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_AccountRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AccountRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_AccountRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AccountRoleList(ctx, req.(*AccountRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UserDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDisableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UserDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_UserDisable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UserDisable(ctx, req.(*UserDisableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_LockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).LockAccount(ctx, req.(*LockAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_LockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).LockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_LockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).LockList(ctx, req.(*LockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_KickPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).KickPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_KickPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).KickPlayer(ctx, req.(*KickPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetPlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetPlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_GetPlayerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetPlayerInfo(ctx, req.(*GetPlayerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetPlayerHeroInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerHeroInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetPlayerHeroInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_GetPlayerHeroInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetPlayerHeroInfo(ctx, req.(*GetPlayerHeroInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountRoleList",
			Handler:    _Account_AccountRoleList_Handler,
		},
		{
			MethodName: "UserDisable",
			Handler:    _Account_UserDisable_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _Account_LockAccount_Handler,
		},
		{
			MethodName: "LockList",
			Handler:    _Account_LockList_Handler,
		},
		{
			MethodName: "KickPlayer",
			Handler:    _Account_KickPlayer_Handler,
		},
		{
			MethodName: "GetPlayerInfo",
			Handler:    _Account_GetPlayerInfo_Handler,
		},
		{
			MethodName: "GetPlayerHeroInfo",
			Handler:    _Account_GetPlayerHeroInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/api.proto",
}
