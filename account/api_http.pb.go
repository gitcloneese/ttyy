// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.12
// source: account/api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountAccountRoleList = "/account.Account/AccountRoleList"
const OperationAccountGetPlayerHeroInfo = "/account.Account/GetPlayerHeroInfo"
const OperationAccountGetPlayerInfo = "/account.Account/GetPlayerInfo"
const OperationAccountKickPlayer = "/account.Account/KickPlayer"
const OperationAccountLockAccount = "/account.Account/LockAccount"
const OperationAccountLockList = "/account.Account/LockList"
const OperationAccountUserDisable = "/account.Account/UserDisable"

type AccountHTTPServer interface {
	AccountRoleList(context.Context, *AccountRoleListReq) (*AccountRoleListRsp, error)
	// GetPlayerHeroInfo 获取玩家仙人信息
	GetPlayerHeroInfo(context.Context, *GetPlayerHeroInfoReq) (*GetPlayerHeroInfoRsp, error)
	// GetPlayerInfo 获取玩家详情
	GetPlayerInfo(context.Context, *GetPlayerInfoReq) (*GetPlayerInfoRsp, error)
	// KickPlayer 踢玩家下线
	KickPlayer(context.Context, *KickPlayerReq) (*KickPlayerRsp, error)
	// LockAccount 封号
	LockAccount(context.Context, *LockAccountReq) (*LockAccountRsp, error)
	// LockList 封号记录
	LockList(context.Context, *LockListReq) (*LockListRsp, error)
	UserDisable(context.Context, *UserDisableReq) (*UserDisableRsp, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/account/AccountRoleList", _Account_AccountRoleList0_HTTP_Handler(srv))
	r.POST("/account/UserDisable", _Account_UserDisable0_HTTP_Handler(srv))
	r.POST("/account/LockAccount", _Account_LockAccount0_HTTP_Handler(srv))
	r.POST("/account/LockList", _Account_LockList0_HTTP_Handler(srv))
	r.POST("/account/KickPlayer", _Account_KickPlayer0_HTTP_Handler(srv))
	r.POST("/account/GetPlayerInfo", _Account_GetPlayerInfo0_HTTP_Handler(srv))
	r.POST("/account/GetPlayerHeroInfo", _Account_GetPlayerHeroInfo0_HTTP_Handler(srv))
}

func _Account_AccountRoleList0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountRoleListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountAccountRoleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccountRoleList(ctx, req.(*AccountRoleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountRoleListRsp)
		return ctx.Result(200, reply)
	}
}

func _Account_UserDisable0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserDisableReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountUserDisable)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserDisable(ctx, req.(*UserDisableReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserDisableRsp)
		return ctx.Result(200, reply)
	}
}

func _Account_LockAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LockAccountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountLockAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LockAccount(ctx, req.(*LockAccountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LockAccountRsp)
		return ctx.Result(200, reply)
	}
}

func _Account_LockList0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LockListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountLockList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LockList(ctx, req.(*LockListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LockListRsp)
		return ctx.Result(200, reply)
	}
}

func _Account_KickPlayer0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in KickPlayerReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountKickPlayer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.KickPlayer(ctx, req.(*KickPlayerReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KickPlayerRsp)
		return ctx.Result(200, reply)
	}
}

func _Account_GetPlayerInfo0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPlayerInfoReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountGetPlayerInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPlayerInfo(ctx, req.(*GetPlayerInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPlayerInfoRsp)
		return ctx.Result(200, reply)
	}
}

func _Account_GetPlayerHeroInfo0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPlayerHeroInfoReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountGetPlayerHeroInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPlayerHeroInfo(ctx, req.(*GetPlayerHeroInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPlayerHeroInfoRsp)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	AccountRoleList(ctx context.Context, req *AccountRoleListReq, opts ...http.CallOption) (rsp *AccountRoleListRsp, err error)
	GetPlayerHeroInfo(ctx context.Context, req *GetPlayerHeroInfoReq, opts ...http.CallOption) (rsp *GetPlayerHeroInfoRsp, err error)
	GetPlayerInfo(ctx context.Context, req *GetPlayerInfoReq, opts ...http.CallOption) (rsp *GetPlayerInfoRsp, err error)
	KickPlayer(ctx context.Context, req *KickPlayerReq, opts ...http.CallOption) (rsp *KickPlayerRsp, err error)
	LockAccount(ctx context.Context, req *LockAccountReq, opts ...http.CallOption) (rsp *LockAccountRsp, err error)
	LockList(ctx context.Context, req *LockListReq, opts ...http.CallOption) (rsp *LockListRsp, err error)
	UserDisable(ctx context.Context, req *UserDisableReq, opts ...http.CallOption) (rsp *UserDisableRsp, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) AccountRoleList(ctx context.Context, in *AccountRoleListReq, opts ...http.CallOption) (*AccountRoleListRsp, error) {
	var out AccountRoleListRsp
	pattern := "/account/AccountRoleList"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountAccountRoleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) GetPlayerHeroInfo(ctx context.Context, in *GetPlayerHeroInfoReq, opts ...http.CallOption) (*GetPlayerHeroInfoRsp, error) {
	var out GetPlayerHeroInfoRsp
	pattern := "/account/GetPlayerHeroInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountGetPlayerHeroInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) GetPlayerInfo(ctx context.Context, in *GetPlayerInfoReq, opts ...http.CallOption) (*GetPlayerInfoRsp, error) {
	var out GetPlayerInfoRsp
	pattern := "/account/GetPlayerInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountGetPlayerInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) KickPlayer(ctx context.Context, in *KickPlayerReq, opts ...http.CallOption) (*KickPlayerRsp, error) {
	var out KickPlayerRsp
	pattern := "/account/KickPlayer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountKickPlayer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) LockAccount(ctx context.Context, in *LockAccountReq, opts ...http.CallOption) (*LockAccountRsp, error) {
	var out LockAccountRsp
	pattern := "/account/LockAccount"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountLockAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) LockList(ctx context.Context, in *LockListReq, opts ...http.CallOption) (*LockListRsp, error) {
	var out LockListRsp
	pattern := "/account/LockList"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountLockList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) UserDisable(ctx context.Context, in *UserDisableReq, opts ...http.CallOption) (*UserDisableRsp, error) {
	var out UserDisableRsp
	pattern := "/account/UserDisable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountUserDisable))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
